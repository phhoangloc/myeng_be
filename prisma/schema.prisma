// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int         @id @default(autoincrement())
  archive     String      @default("user")
  username    String      @unique
  password    String 
  email       String      @unique
  active      Boolean     @default(false)
  position    Role        @default(user)
  createdAt   DateTime    @default(now())
  avataId     Int?           
  avata       File?        @relation("UserAvata", fields: [avataId], references: [id])
  pics        File[]
  blogs       Blog[]
}
enum Role {
  user
  admin
}
model File {
  id                Int           @id @default(autoincrement())
  archive           String        @default("pic")
  hostId            Int
  host              User          @relation(fields: [hostId], references: [id])   
  name              String      
  createdAt         DateTime      @default(now())
  avataOf           User[]        @relation("UserAvata")
  Path              Path[]

}
model Blog  {
  id                Int           @id @default(autoincrement())
  archive           String        @default("blog")
  hostId            Int
  host              User          @relation(fields: [hostId], references: [id])   
  slug              String        @unique
  content           String       @db.Text
  censor            Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updateDate        DateTime      @default(now())
}
model Word {
  id          Int         @id @default(autoincrement())
  archive     String      @default("word")
  name        String      @unique
  mean        String      
  example     String?     @db.Text
  book        String?     @db.Text
  createdAt   DateTime    @default(now())
}
model Path {
  id              Int         @id @default(autoincrement())
  archive         String      @default("pathone")
  question        String      @db.Text
  choose          String      @db.Text   
  script          String?     @db.Text
  audioId         Int?     
  audio           File?       @relation(fields: [audioId], references: [id])
  explain         String      @db.Text
  createdAt       DateTime    @default(now())
}